<<<<<<< HEAD
# Generated by Django 4.2.6 on 2023-10-29 18:39
=======
# Generated by Django 4.2.6 on 2023-10-29 20:01
>>>>>>> b541cb0eb1ab4b6c4bd351bdc3cfaa5dfa7d43d3

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('courses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
<<<<<<< HEAD
                ('personnel_number', models.UUIDField(blank=True, default=uuid.uuid4, null=True)),
=======
                ('personal_number', models.UUIDField(blank=True, default=uuid.uuid4, null=True)),
>>>>>>> b541cb0eb1ab4b6c4bd351bdc3cfaa5dfa7d43d3
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('mobile', models.CharField(blank=True, max_length=11, null=True)),
                ('national_id', models.CharField(blank=True, max_length=10, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ITManager',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
<<<<<<< HEAD
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
=======
                'verbose_name': 'IT Manager',
                'verbose_name_plural': 'IT Managers',
>>>>>>> b541cb0eb1ab4b6c4bd351bdc3cfaa5dfa7d43d3
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('entry_year', models.PositiveIntegerField()),
                ('entry_term', models.CharField(max_length=20)),
                ('average', models.DecimalField(decimal_places=2, max_digits=4, null=True)),
                ('military_status', models.BooleanField()),
                ('seniority', models.PositiveIntegerField()),
                ('college', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students_college', to='courses.faculty')),
                ('current_courses', models.ManyToManyField(related_name='students_current', to='courses.course')),
                ('passed_courses', models.ManyToManyField(related_name='students_passed', to='courses.course')),
                ('study_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students_field', to='courses.studyfield')),
            ],
            options={
<<<<<<< HEAD
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
=======
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
>>>>>>> b541cb0eb1ab4b6c4bd351bdc3cfaa5dfa7d43d3
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('expertise', models.DateTimeField()),
                ('rank', models.CharField(max_length=50)),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='professor_faculty', to='courses.faculty')),
                ('study_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='professor_study', to='courses.studyfield')),
            ],
            options={
<<<<<<< HEAD
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
=======
                'verbose_name': 'Professor',
                'verbose_name_plural': 'Professors',
>>>>>>> b541cb0eb1ab4b6c4bd351bdc3cfaa5dfa7d43d3
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DeputyEducational',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deputy_educational_faculty', to='courses.faculty')),
                ('study_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deputy_educational_study', to='courses.studyfield')),
            ],
            options={
<<<<<<< HEAD
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
=======
                'verbose_name': 'Deputy Educational',
                'verbose_name_plural': 'Deputy Educationals',
>>>>>>> b541cb0eb1ab4b6c4bd351bdc3cfaa5dfa7d43d3
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
